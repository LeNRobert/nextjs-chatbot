"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mistralai";
exports.ids = ["vendor-chunks/@mistralai"];
exports.modules = {

/***/ "(rsc)/./node_modules/@mistralai/mistralai/src/client.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mistralai/mistralai/src/client.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nlet isNode = false;\n\nconst VERSION = '0.0.3';\nconst RETRY_STATUS_CODES = [429, 500, 502, 503, 504];\nconst ENDPOINT = 'https://api.mistral.ai';\n\n/**\n * Initialize fetch\n * @return {Promise<void>}\n */\nasync function initializeFetch() {\n  if (typeof window === 'undefined' ||\n    typeof globalThis.fetch === 'undefined') {\n    const nodeFetch = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\"));\n    fetch = nodeFetch.default;\n    isNode = true;\n  } else {\n    fetch = globalThis.fetch;\n  }\n}\n\ninitializeFetch();\n\n/**\n * MistralAPIError\n * @return {MistralAPIError}\n * @extends {Error}\n */\nclass MistralAPIError extends Error {\n  /**\n   * A simple error class for Mistral API errors\n   * @param {*} message\n   */\n  constructor(message) {\n    super(message);\n    this.name = 'MistralAPIError';\n  }\n};\n\n/**\n * MistralClient\n * @return {MistralClient}\n */\nclass MistralClient {\n  /**\n   * A simple and lightweight client for the Mistral API\n   * @param {*} apiKey can be set as an environment variable MISTRAL_API_KEY,\n   * or provided in this parameter\n   * @param {*} endpoint defaults to https://api.mistral.ai\n   * @param {*} maxRetries defaults to 5\n   * @param {*} timeout defaults to 120 seconds\n   */\n  constructor(\n    apiKey = process.env.MISTRAL_API_KEY,\n    endpoint = ENDPOINT,\n    maxRetries = 5,\n    timeout = 120,\n  ) {\n    this.endpoint = endpoint;\n    this.apiKey = apiKey;\n\n    this.maxRetries = maxRetries;\n    this.timeout = timeout;\n\n    if (this.endpoint.indexOf('inference.azure.com')) {\n      this.modelDefault = 'mistral';\n    }\n  }\n\n  /**\n   *\n   * @param {*} method\n   * @param {*} path\n   * @param {*} request\n   * @return {Promise<*>}\n   */\n  _request = async function(method, path, request) {\n    const url = `${this.endpoint}/${path}`;\n    const options = {\n      method: method,\n      headers: {\n        'User-Agent': `mistral-client-js/${VERSION}`,\n        'Accept': request?.stream ? 'text/event-stream' : 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n      },\n      body: method !== 'get' ? JSON.stringify(request) : null,\n      timeout: this.timeout * 1000,\n    };\n\n    for (let attempts = 0; attempts < this.maxRetries; attempts++) {\n      try {\n        const response = await fetch(url, options);\n\n        if (response.ok) {\n          if (request?.stream) {\n            if (isNode) {\n              return response.body;\n            } else {\n              const reader = response.body.getReader();\n              // Chrome does not support async iterators yet, so polyfill it\n              const asyncIterator = async function* () {\n                try {\n                  while (true) {\n                    // Read from the stream\n                    const {done, value} = await reader.read();\n                    // Exit if we're done\n                    if (done) return;\n                    // Else yield the chunk\n                    yield value;\n                  }\n                } finally {\n                  reader.releaseLock();\n                }\n              };\n\n              return asyncIterator();\n            }\n          }\n          return await response.json();\n        } else if (RETRY_STATUS_CODES.includes(response.status)) {\n          console.debug(\n            `Retrying request on response status: ${response.status}`,\n            `Response: ${await response.text()}`,\n            `Attempt: ${attempts + 1}`,\n          );\n          // eslint-disable-next-line max-len\n          await new Promise((resolve) =>\n            setTimeout(resolve, Math.pow(2, (attempts + 1)) * 500),\n          );\n        } else {\n          throw new MistralAPIError(\n            `HTTP error! status: ${response.status} ` +\n            `Response: \\n${await response.text()}`,\n          );\n        }\n      } catch (error) {\n        console.error(`Request failed: ${error.message}`);\n        if (error.name === 'MistralAPIError') {\n          throw error;\n        }\n        if (attempts === this.maxRetries - 1) throw error;\n        // eslint-disable-next-line max-len\n        await new Promise((resolve) =>\n          setTimeout(resolve, Math.pow(2, (attempts + 1)) * 500),\n        );\n      }\n    }\n    throw new Error('Max retries reached');\n  };\n\n  /**\n   * Creates a chat completion request\n   * @param {*} model\n   * @param {*} messages\n   * @param {*} tools\n   * @param {*} temperature\n   * @param {*} maxTokens\n   * @param {*} topP\n   * @param {*} randomSeed\n   * @param {*} stream\n   * @param {*} safeMode deprecated use safePrompt instead\n   * @param {*} safePrompt\n   * @param {*} toolChoice\n   * @param {*} responseFormat\n   * @return {Promise<Object>}\n   */\n  _makeChatCompletionRequest = function(\n    model,\n    messages,\n    tools,\n    temperature,\n    maxTokens,\n    topP,\n    randomSeed,\n    stream,\n    safeMode,\n    safePrompt,\n    toolChoice,\n    responseFormat,\n  ) {\n    // if modelDefault and model are undefined, throw an error\n    if (!model && !this.modelDefault) {\n      throw new MistralAPIError(\n        'You must provide a model name',\n      );\n    }\n    return {\n      model: model ?? this.modelDefault,\n      messages: messages,\n      tools: tools ?? undefined,\n      temperature: temperature ?? undefined,\n      max_tokens: maxTokens ?? undefined,\n      top_p: topP ?? undefined,\n      random_seed: randomSeed ?? undefined,\n      stream: stream ?? undefined,\n      safe_prompt: (safeMode || safePrompt) ?? undefined,\n      tool_choice: toolChoice ?? undefined,\n      response_format: responseFormat ?? undefined,\n    };\n  };\n\n  /**\n   * Returns a list of the available models\n   * @return {Promise<Object>}\n   */\n  listModels = async function() {\n    const response = await this._request('get', 'v1/models');\n    return response;\n  };\n\n  /**\n   * A chat endpoint without streaming\n   * @param {*} model the name of the model to chat with, e.g. mistral-tiny\n   * @param {*} messages an array of messages to chat with, e.g.\n   * [{role: 'user', content: 'What is the best French cheese?'}]\n   * @param {*} tools  a list of tools to use.\n   * @param {*} temperature the temperature to use for sampling, e.g. 0.5\n   * @param {*} maxTokens the maximum number of tokens to generate, e.g. 100\n   * @param {*} topP the cumulative probability of tokens to generate, e.g. 0.9\n   * @param {*} randomSeed the random seed to use for sampling, e.g. 42\n   * @param {*} safeMode deprecated use safePrompt instead\n   * @param {*} safePrompt whether to use safe mode, e.g. true\n   * @param {*} toolChoice the tool to use, e.g. 'auto'\n   * @param {*} responseFormat the format of the response, e.g. 'json_format'\n   * @return {Promise<Object>}\n   */\n  chat = async function({\n    model,\n    messages,\n    tools,\n    temperature,\n    maxTokens,\n    topP,\n    randomSeed,\n    safeMode,\n    safePrompt,\n    toolChoice,\n    responseFormat,\n  }) {\n    const request = this._makeChatCompletionRequest(\n      model,\n      messages,\n      tools,\n      temperature,\n      maxTokens,\n      topP,\n      randomSeed,\n      false,\n      safeMode,\n      safePrompt,\n      toolChoice,\n      responseFormat,\n    );\n    const response = await this._request(\n      'post',\n      'v1/chat/completions',\n      request,\n    );\n    return response;\n  };\n\n  /**\n   * A chat endpoint that streams responses.\n   * @param {*} model the name of the model to chat with, e.g. mistral-tiny\n   * @param {*} messages an array of messages to chat with, e.g.\n   * [{role: 'user', content: 'What is the best French cheese?'}]\n   * @param {*} tools  a list of tools to use.\n   * @param {*} temperature the temperature to use for sampling, e.g. 0.5\n   * @param {*} maxTokens the maximum number of tokens to generate, e.g. 100\n   * @param {*} topP the cumulative probability of tokens to generate, e.g. 0.9\n   * @param {*} randomSeed the random seed to use for sampling, e.g. 42\n   * @param {*} safeMode deprecated use safePrompt instead\n   * @param {*} safePrompt whether to use safe mode, e.g. true\n   * @param {*} toolChoice the tool to use, e.g. 'auto'\n   * @param {*} responseFormat the format of the response, e.g. 'json_format'\n   * @return {Promise<Object>}\n   */\n  chatStream = async function* ({\n    model,\n    messages,\n    tools,\n    temperature,\n    maxTokens,\n    topP,\n    randomSeed,\n    safeMode,\n    safePrompt,\n    toolChoice,\n    responseFormat,\n  }) {\n    const request = this._makeChatCompletionRequest(\n      model,\n      messages,\n      tools,\n      temperature,\n      maxTokens,\n      topP,\n      randomSeed,\n      true,\n      safeMode,\n      safePrompt,\n      toolChoice,\n      responseFormat,\n    );\n    const response = await this._request(\n      'post',\n      'v1/chat/completions',\n      request,\n    );\n\n    let buffer = '';\n    const decoder = new TextDecoder();\n    for await (const chunk of response) {\n      buffer += decoder.decode(chunk, {stream: true});\n      let firstNewline;\n      while ((firstNewline = buffer.indexOf('\\n')) !== -1) {\n        const chunkLine = buffer.substring(0, firstNewline);\n        buffer = buffer.substring(firstNewline + 1);\n        if (chunkLine.startsWith('data:')) {\n          const json = chunkLine.substring(6).trim();\n          if (json !== '[DONE]') {\n            yield JSON.parse(json);\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * An embeddings endpoint that returns embeddings for a single,\n   * or batch of inputs\n   * @param {*} model The embedding model to use, e.g. mistral-embed\n   * @param {*} input The input to embed,\n   * e.g. ['What is the best French cheese?']\n   * @return {Promise<Object>}\n   */\n  embeddings = async function({model, input}) {\n    const request = {\n      model: model,\n      input: input,\n    };\n    const response = await this._request('post', 'v1/embeddings', request);\n    return response;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MistralClient);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mistralai/mistralai/src/client.js\n");

/***/ })

};
;